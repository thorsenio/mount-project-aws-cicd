# CloudFormation template for an ECS stack

AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS cluster'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  DefaultSecurityGroupName:
    Description: 'Name of the default security group for the VPC'
    Type: String

  DesiredAzCount:
    Description: 'Desired number of AZs in the VPC (2-3)'
    Type: Number
    MinValue: 2
    MaxValue: 3

  Ec2InstanceName:
    Description: "Name assigned to the cluster's EC2 instances."
    Type: String

  EcsClusterName:
    Description: 'Name of the ECS cluster.'
    Type: String

  FileSystemName:
    Description: 'FileSystem name'
    Type: String

  ImageId:
    # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    Description: ID of ECS-optimized AMI optimized for the region.
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  Ec2InstanceType:
    Description: EC2 instance type.
    Type: String
    AllowedValues:
      - 't2.micro'
      - 't3.micro'
      - 't3.small'
      - 't3.medium'

  KeyPairKeyName:
    Description: EC2 key pair for SSH access to the instance.
    Type: AWS::EC2::KeyPair::KeyName

  PlatformCommitHash:
    Description: 'Commit hash of the CI/CD platform'
    Type: String

  PlatformId:
    Description: 'Platform ID'
    Type: String

  PlatformVersionLabel:
    Description: 'AWS CI/CD platform version label (version + stage)'
    Type: String

  VpcName:
    Description: 'Name of the VPC'
    Type: String

Conditions:
  Create3Subnets: !Equals [!Ref DesiredAzCount, 3]

Resources:
  # ----- ECS resources
  EcsCluster:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EcsClusterName

  # ----- End of ECS resources

  # ----- Instance resources
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Policies:
        -
          PolicyName: 'ecs-to-cloudwatch-logs'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource: 'arn:aws:logs:*:*:*'

      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service: 'ec2.amazonaws.com'
  # ----- End of Instance resources

  # ----- Autoscaling Group resources
  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - EcsCluster
      - FileSystem
      - MountTargetA
      - MountTargetB
      - MountTargetC
      - TargetGroup
      - VpcStack
    Properties:
      VPCZoneIdentifier:
        - !GetAtt VpcStack.Outputs.PrivateSubnetA
        - !GetAtt VpcStack.Outputs.PrivateSubnetB
        - !GetAtt VpcStack.Outputs.PrivateSubnetC
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref AutoscalingLaunchConfig
      TargetGroupARNs:
        - !Ref TargetGroup

      # Size constraints
      DesiredCapacity: 2
      MinSize: 2
      MaxSize: 2

      Tags:
        - Key: !Ref AWS::StackName
          Value: 'true'
          PropagateAtLaunch: true
        - Key: 'Name'
          Value: !Ref Ec2InstanceName
          PropagateAtLaunch: true
        - Key: 'role'
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true

  AutoscalingLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref Ec2InstanceType
      KeyName: !Ref KeyPairKeyName
      SecurityGroups:
        - !GetAtt VpcStack.Outputs.SecurityGroupId
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              yum update -y
              yum install -y amazon-efs-utils

              # Specify which cluster to join
              echo ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config

              # Create a mount point for the EFS file system
              mkdir /mnt/efs

              DIR_SRC=${FileSystemId}.efs.${AWS::Region}.amazonaws.com
              DIR_TGT=/mnt/efs

              # Mount EFS file system
              mount -t efs $DIR_SRC:/ $DIR_TGT

              # Backup fstab
              cp -p /etc/fstab /etc/fstab.back-$(date +%F)

              # Add the file system to `fstab` so that it is remounted whenever the instance reboots
              echo "${FileSystemId}:/ $DIR_TGT efs tls,_netdev" >> /etc/fstab

              # Install awslogs & the jq JSON parser
              yum install -y awslogs jq

              # Inject the contents of the CloudWatch Logs configuration file
              cat > /etc/awslogs/awslogs.conf <<- EOF
              [general]
              state_file = /var/lib/awslogs/agent-state

              [/var/log/dmesg]
              file = /var/log/dmesg
              log_group_name = /var/log/dmesg
              log_stream_name = {cluster}/{container_instance_id}

              [/var/log/messages]
              file = /var/log/messages
              log_group_name = /var/log/messages
              log_stream_name = {cluster}/{container_instance_id}
              datetime_format = %b %d %H:%M:%S

              [/var/log/ecs/ecs-init.log]
              file = /var/log/ecs/ecs-init.log
              log_group_name = /var/log/ecs/ecs-init.log
              log_stream_name = {cluster}/{container_instance_id}
              datetime_format = %Y-%m-%dT%H:%M:%SZ

              [/var/log/ecs/ecs-agent.log]
              file = /var/log/ecs/ecs-agent.log.*
              log_group_name = /var/log/ecs/ecs-agent.log
              log_stream_name = {cluster}/{container_instance_id}
              datetime_format = %Y-%m-%dT%H:%M:%SZ

              [/var/log/ecs/audit.log]
              file = /var/log/ecs/audit.log.*
              log_group_name = /var/log/ecs/audit.log
              log_stream_name = {cluster}/{container_instance_id}
              datetime_format = %Y-%m-%dT%H:%M:%SZ
              EOF

              # Write the awslogs bootstrap script to /usr/local/bin/bootstrap-awslogs.sh
              cat > /usr/local/bin/bootstrap-awslogs.sh <<- 'EOF'
              #!/usr/bin/env bash
              exec 2>>/var/log/ecs/cloudwatch-logs-start.log
              set -x

              until curl -s http://localhost:51678/v1/metadata
              do
                sleep 1
              done

              # Set the region to send CloudWatch Logs data to (the region where the container instance is located)
              cp /etc/awslogs/awscli.conf /etc/awslogs/awscli.conf.bak
              region=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
              sed -i -e "s/region = .*/region = $region/g" /etc/awslogs/awscli.conf

              # Grab the cluster and container instance ARN from instance metadata
              cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')
              container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )

              # Replace the cluster name and container instance ID placeholders with the actual values
              cp /etc/awslogs/awslogs.conf /etc/awslogs/awslogs.conf.bak
              sed -i -e "s/{cluster}/$cluster/g" /etc/awslogs/awslogs.conf
              sed -i -e "s/{container_instance_id}/$container_instance_id/g" /etc/awslogs/awslogs.conf
              EOF

              # Write the bootstrap-awslogs systemd unit file to /etc/systemd/system/bootstrap-awslogs.service
              cat > /etc/systemd/system/bootstrap-awslogs.service <<- EOF
              [Unit]
              Description=Bootstrap awslogs agent
              Requires=ecs.service
              After=ecs.service
              Before=awslogsd.service

              [Service]
              Type=oneshot
              RemainAfterExit=yes
              ExecStart=/usr/local/bin/bootstrap-awslogs.sh

              [Install]
              WantedBy=awslogsd.service
              EOF

              chmod +x /usr/local/bin/bootstrap-awslogs.sh
              systemctl daemon-reload
              systemctl enable bootstrap-awslogs.service
              systemctl enable awslogsd.service
              systemctl start awslogsd.service --no-block

              # Set the Docker logging driver to awslogs
              cat > /etc/docker/daemon.json <<- EOF
              {
                "log-driver": "awslogs",
                "log-opts": {
                  "awslogs-group": "${EcsClusterName}",
                  "awslogs-region": "${AWS::Region}"
                }
              }
              EOF

              # Restart the Docker daemon to enable the changes
              systemctl restart docker

            - FileSystemId: !Ref FileSystem

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: '/health'
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: 'HTTP'
      VpcId: !GetAtt VpcStack.Outputs.VpcId
  # ----- End of Autoscaling Group resources

  # ----- Application Load Balancer resources
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: VpcStack
    Properties:
      Name: !Sub "${AWS::StackName}-alb"
      SecurityGroups:
        - !Ref AlbSecurityGroup
        - !GetAtt VpcStack.Outputs.SecurityGroupId
      Subnets:
        - !GetAtt VpcStack.Outputs.PublicSubnetA
        - !GetAtt VpcStack.Outputs.PublicSubnetB
        - !GetAtt VpcStack.Outputs.PublicSubnetC

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VpcStack
    Properties:
      GroupDescription: 'HTTP from anywhere'
      GroupName: !Sub "${AWS::StackName}-alb-sg"
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          Description: 'HTTP to ALB from anywhere'
          IpProtocol: 'TCP'
          FromPort: 80
          ToPort: 80
      VpcId: !GetAtt VpcStack.Outputs.VpcId

  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: 'HTTP'
  # ----- End of Application Load Balancer resources

  # ----- FileSystem resources
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: EcsClusterName
          Value: !Ref EcsClusterName
        - Key: Name
          Value: !Ref FileSystemName

  MountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - !GetAtt VpcStack.Outputs.SecurityGroupId
      SubnetId: !GetAtt VpcStack.Outputs.PrivateSubnetA

  MountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - !GetAtt VpcStack.Outputs.SecurityGroupId
      SubnetId: !GetAtt VpcStack.Outputs.PrivateSubnetB

  MountTargetC:
    Type: AWS::EFS::MountTarget
    Condition: Create3Subnets
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - !GetAtt VpcStack.Outputs.SecurityGroupId
      SubnetId: !GetAtt VpcStack.Outputs.PrivateSubnetC
  # ----- End of FileSystem resources

  VpcStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        DefaultSecurityGroupName: !Ref DefaultSecurityGroupName
        DesiredAzCount: !Ref DesiredAzCount
        VpcName: !Ref VpcName
      TemplateURL: './vpc.yml'
      TimeoutInMinutes: 5

Outputs:
  AlbDomainName:
    Description: 'Endpoint of the application load balancer'
    Value: !GetAtt AppLoadBalancer.DNSName

  AutoscalingGroupName:
    Description: 'Name of autoscaling group.'
    Value: !Ref AutoscalingGroup

  FileSystemId:
    Description: 'ID of the EFS file system'
    Value: !Ref FileSystem

  PrivateSubnetA:
    Description: 'ID of private subnet in AZ a'
    Value: !GetAtt VpcStack.Outputs.PrivateSubnetA

  PrivateSubnetB:
    Description: 'ID of private subnet in AZ b'
    Value: !GetAtt VpcStack.Outputs.PrivateSubnetB

  PrivateSubnetC:
    Description: 'ID of private subnet in AZ c'
    Condition: Create3Subnets
    Value: !GetAtt VpcStack.Outputs.PrivateSubnetC

  SecurityGroupId:
    Description: "ID of the VPC's primary security group"
    Value: !GetAtt VpcStack.Outputs.SecurityGroupId

  VpcId:
    Description: 'ID of the VPC'
    Value: !GetAtt VpcStack.Outputs.VpcId
