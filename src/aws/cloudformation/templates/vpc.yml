# CloudFormation template for the networking resources of an ECS stack

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Multi-AZ VPC with public & private subnets'

Parameters:
  DefaultSecurityGroupName:
    Description: 'Name of the default security group for the VPC'
    Type: String

  DesiredAzCount:
    Description: 'Desired number of AZs in the VPC (2-3)'
    Type: Number
    MinValue: 2
    MaxValue: 3

  VpcName:
    Description: 'Name of the VPC'
    Type: String

Conditions:
  Create3Subnets: !Equals [!Ref DesiredAzCount, 3]

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: 'Name'
          Value: !Ref VpcName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
    Type: AWS::EC2::VPCGatewayAttachment

  # Route Table resources
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  # Create a NAT gateway in AZ1
  # TODO: Create an additional gateway for redundancy?
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      # `!Ref ElasticIp` returns the EIP's IP address, not its allocation ID; use `!GetAtt` instead
      AllocationId: !GetAtt
        - ElasticIp
        - AllocationId
      SubnetId: !Ref PublicSubnetAzA
  ElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: 'vpc'
    DependsOn: GatewayAttachment
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable

  # Create the requested number of public subnets
  PublicSubnetAzA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: '10.0.1.0/24'
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Access'
          Value: 'public'
    DependsOn: PublicRouteTable
  PublicSubnetAzB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: '10.0.2.0/24'
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Access'
          Value: 'public'
    DependsOn: PublicRouteTable
  PublicSubnetAzC:
    Type: AWS::EC2::Subnet
    Condition: Create3Subnets
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: '10.0.3.0/24'
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Access'
          Value: 'public'
    DependsOn: PublicRouteTable

  # Associate the public subnets with the public route table, which has a route to the IGW
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAzA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAzB
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Create3Subnets
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAzC

  # Create the requested number of private subnets
  PrivateSubnetAzA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: '10.0.4.0/24'
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Access'
          Value: 'private'
  PrivateSubnetAzB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: '10.0.5.0/24'
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Access'
          Value: 'private'
  PrivateSubnetAzC:
    Type: AWS::EC2::Subnet
    Condition: Create3Subnets
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: '10.0.6.0/24'
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Access'
          Value: 'private'

  # Associate the private subnets with the private route table, which has a route to the NAT gateway
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetAzA
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetAzB
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Create3Subnets
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetAzC

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'All intragroup traffic, SSH access from anywhere'
      GroupName: !Ref DefaultSecurityGroupName
      VpcId: !Ref Vpc

  # Allow all outbound traffic
  SgEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref SecurityGroup
      CidrIp: '0.0.0.0/0'
      FromPort: 0
      ToPort: 65535
      IpProtocol: -1

  # Allow inbound traffic from the same group
  SgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      FromPort: 0
      ToPort: 65535
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup

  # Allow SSH ingress from anywhere
  SshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      CidrIp: '0.0.0.0/0'
      FromPort: 22
      ToPort: 22
      IpProtocol: 'tcp'

Outputs:
  PrivateSubnetA:
    Description: 'ID of private subnet in AZ a'
    Value: !Ref PrivateSubnetAzA
  PrivateSubnetB:
    Description: 'ID of private subnet in AZ b'
    Value: !Ref PrivateSubnetAzB
  PrivateSubnetC:
    Description: 'ID of private subnet in AZ c'
    Value: !Ref PrivateSubnetAzC
    Condition: Create3Subnets

  PublicSubnetA:
    Description: 'ID of public subnet in AZ a'
    Value: !Ref PublicSubnetAzA
  PublicSubnetB:
    Description: 'ID of public subnet in AZ b'
    Value: !Ref PublicSubnetAzB
  PublicSubnetC:
    Description: 'ID of public subnet in AZ c'
    Value: !Ref PublicSubnetAzC
    Condition: Create3Subnets

  SecurityGroupId:
    Description: "ID of the VPC's primary security group"
    Value: !Ref SecurityGroup

  VpcId:
    Description: 'ID of VPC'
    Value: !Ref Vpc

