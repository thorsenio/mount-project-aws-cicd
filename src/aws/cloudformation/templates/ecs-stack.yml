# CloudFormation template for an ECS stack

AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  DefaultSecurityGroupName:
    Description: 'Name of the default security group for the VPC'
    Type: String
  EcsClusterName:
    Description: 'Name of the ECS cluster.'
    Type: String
  ImageId:
    # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    Description: ID of ECS-optimized AMI optimized for the region.
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  InstanceType:
    Description: EC2 instance type.
    Type: String
    AllowedValues:
      - 't2.micro'
      - 't3.micro'
      - 't3.small'
      - 't3.medium'
    Default: 't2.micro'
  KeyPairKeyName:
    Description: EC2 key pair for SSH access to the instance.
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  # ----- ECS resources
  EcsCluster:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EcsClusterName

  TaskExecutionPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Effect: 'Allow'
            Resource:
              - '*'
        Version: '2012-10-17'
      PolicyName: 'fargate-execution'
      Roles:
        - Ref: TaskExecutionRole
    Type: AWS::IAM::Policy

  TaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
    Type: AWS::IAM::Role
  # ----- End of ECS resources

  # ----- Instance resources
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service: 'ec2.amazonaws.com'
  # ----- End of Instance resources

  # ----- Autoscaling Group resources
  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - VpcStack
      - EcsCluster
      - TargetGroup
    Properties:
      VPCZoneIdentifier:
        - !GetAtt VpcStack.Outputs.PrivateSubnet1
        - !GetAtt VpcStack.Outputs.PrivateSubnet2
        - !GetAtt VpcStack.Outputs.PrivateSubnet3
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref AutoscalingLaunchConfig
      TargetGroupARNs:
        - !Ref TargetGroup

      # Size constraints
      DesiredCapacity: 2
      MinSize: 2
      MaxSize: 2

      Tags:
        - Key: !Ref AWS::StackName
          Value: 'true'
          PropagateAtLaunch: true
        - Key: 'Name'
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true
        - Key: 'role'
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true

  AutoscalingLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairKeyName
      SecurityGroups:
        - !GetAtt VpcStack.Outputs.SecurityGroupId
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          # Specify which cluster to join
          echo ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: 'HTTP'
      VpcId: !GetAtt VpcStack.Outputs.VpcId
  # ----- End of Autoscaling Group resources

  # ----- Application Load Balancer resources
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: VpcStack
    Properties:
      Name: !Sub "${AWS::StackName}-alb"
      SecurityGroups:
        - !Ref AlbSecurityGroup
        - !GetAtt VpcStack.Outputs.SecurityGroupId
      Subnets:
        - !GetAtt VpcStack.Outputs.PublicSubnet1
        - !GetAtt VpcStack.Outputs.PublicSubnet2
        - !GetAtt VpcStack.Outputs.PublicSubnet3

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VpcStack
    Properties:
      GroupDescription: 'HTTP from anywhere'
      GroupName: !Sub "${AWS::StackName}-alb-sg"
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          Description: 'HTTP to ALB from anywhere'
          IpProtocol: 'TCP'
          FromPort: 80
          ToPort: 80
      VpcId: !GetAtt VpcStack.Outputs.VpcId

  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: 'HTTP'
  # ----- End of Application Load Balancer resources

  VpcStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        DefaultSecurityGroupName: !Ref DefaultSecurityGroupName
        StackName: !Sub ${AWS::StackName}
      TemplateURL: './vpc-stack.yml'
      TimeoutInMinutes: 5

Outputs:
  AutoscalingGroupName:
    Description: 'Name of autoscaling group.'
    Value: !Ref AutoscalingGroup
